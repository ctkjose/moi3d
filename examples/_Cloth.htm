<html xmlns:moi>
	<head>
		<link rel="stylesheet" href="moi://ui/moi.css" type="text/css">
		<script>
			/* ########################### THREE ################################################### */
			var THREE = {};
			THREE.Vector3 = function ( x, y, z ) { this.x = x || 0; this.y = y || 0; this.z = z || 0; };

			THREE.Vector3.prototype =
			{ 	constructor: THREE.Vector3,
				set: function ( x, y, z ) {	this.x = x; this.y = y; this.z = z; return this; },
				setX: function ( x ) { this.x = x; return this; },
				setY: function ( y ) { this.y = y; return this; },
				setZ: function ( z ) { this.z = z; return this; },
				copy: function ( v ) { this.x = v.x;	this.y = v.y; this.z = v.z; return this; },
				add: function ( v ) { this.x += v.x; this.y += v.y; this.z += v.z; return this; },
				sub: function ( v ) { this.x -= v.x; this.y -= v.y; this.z -= v.z; return this; },

				subVectors: function ( a, b ) { this.x = a.x - b.x; this.y = a.y - b.y; this.z = a.z - b.z; return this; },
				multiplyScalar: function ( scalar ) { this.x *= scalar; this.y *= scalar; this.z *= scalar; return this; },
				divideScalar: function ( scalar ) { if ( scalar !== 0 ) { var invScalar = 1 / scalar; this.x *= invScalar; this.y *= invScalar; this.z *= invScalar; } else { this.x = 0; this.y = 0; this.z = 0; } return this; },
				dot: function ( v ) { return this.x * v.x + this.y * v.y + this.z * v.z; },
				length: function () { return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z ); },
				normalize: function () { return this.divideScalar( this.length() ); },
				cross: function ( v ) { var x = this.x, y = this.y, z = this.z; this.x = y * v.z - z * v.y; this.y = z * v.x - x * v.z; this.z = x * v.y - y * v.x; return this; },
				clone: function () { return new THREE.Vector3( this.x, this.y, this.z ); }
			};

			THREE.Geometry = function () { this.vertices = []; this.faces = []; this.faceVertexUvs = [[]]; };

			THREE.Geometry.prototype =
			{	constructor: THREE.Geometry,

				computeCentroids: function ()
				{
					var f, fl, face;
					for ( f = 0, fl = this.faces.length; f < fl; f ++ )
					{
						face = this.faces[ f ];
						face.centroid.set( 0, 0, 0 );
						face.centroid.add( this.vertices[ face.a ] );
						face.centroid.add( this.vertices[ face.b ] );
						face.centroid.add( this.vertices[ face.c ] );
						face.centroid.divideScalar( 3 );
					}
				},

				computeFaceNormals: function ()
				{
					var cb = new THREE.Vector3(), ab = new THREE.Vector3();
					for ( var f = 0, fl = this.faces.length; f < fl; f ++ )
					{
						var face = this.faces[ f ];
						var vA = this.vertices[ face.a ];
						var vB = this.vertices[ face.b ];
						var vC = this.vertices[ face.c ];
						cb.subVectors( vC, vB );
						ab.subVectors( vA, vB );
						cb.cross( ab );
						cb.normalize();
						face.normal.copy( cb );
					}
				},

				computeVertexNormals: function ( areaWeighted )
				{
					var v, vl, f, fl, face, vertices;
					vertices = new Array( this.vertices.length );
					for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) { vertices[ v ] = new THREE.Vector3(); }

					if ( areaWeighted )
					{
						var vA, vB, vC, vD;
						var cb = new THREE.Vector3(), ab = new THREE.Vector3(), db = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();
						for ( f = 0, fl = this.faces.length; f < fl; f ++ )
						{
							face = this.faces[ f ];
							vA = this.vertices[ face.a ]; vB = this.vertices[ face.b ]; vC = this.vertices[ face.c ];
							cb.subVectors( vC, vB ); ab.subVectors( vA, vB ); cb.cross( ab );
							vertices[ face.a ].add( cb ); vertices[ face.b ].add( cb ); vertices[ face.c ].add( cb );
						}
					}
					else
					{
						for ( f = 0, fl = this.faces.length; f < fl; f ++ )
						{
							face = this.faces[ f ];
							vertices[ face.a ].add( face.normal ); vertices[ face.b ].add( face.normal ); vertices[ face.c ].add( face.normal );
						}
					}
					for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) { vertices[ v ].normalize();	}
					for ( f = 0, fl = this.faces.length; f < fl; f ++ )
					{
						face = this.faces[ f ];
						face.vertexNormals[ 0 ] = vertices[ face.a ].clone();
						face.vertexNormals[ 1 ] = vertices[ face.b ].clone();
						face.vertexNormals[ 2 ] = vertices[ face.c ].clone();
					}
				}
			};

			THREE.ParametricGeometry = function ( func, slices, stacks )
			{
				THREE.Geometry.call( this );
				var verts = this.vertices;
				var faces = this.faces;
				var uvs = this.faceVertexUvs[ 0 ];
				var i, il, j, p;
				var u, v;
				var stackCount = stacks + 1;
				var sliceCount = slices + 1;

				for ( i = 0; i <= stacks; i ++ )
				{
					v = i / stacks;
					for ( j = 0; j <= slices; j ++ )
					{
						u = j / slices;
						p = func( u, v );
						verts.push( p );
					}
				}

				var a, b, c, d;
				var uva, uvb, uvc, uvd;

				for ( i = 0; i < stacks; i ++ )
				{
					for ( j = 0; j < slices; j ++ )
					{
						a = i * sliceCount + j;
						b = i * sliceCount + j + 1;
						c = (i + 1) * sliceCount + j + 1;
						d = (i + 1) * sliceCount + j;

						uva = new THREE.Vector2( j / slices, i / stacks );
						uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
						uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
						uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );

						faces.push( new THREE.Face3( a, b, d ) );
						uvs.push( [ uva, uvb, uvd ] );
						faces.push( new THREE.Face3( b, c, d ) );
						uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );
					}
				}
				this.computeCentroids();
				this.computeFaceNormals();
				this.computeVertexNormals();
			};

			THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );

			THREE.Vector2 = function ( x, y ) { this.x = x || 0; this.y = y || 0; };

			THREE.Vector2.prototype =
			{	constructor: THREE.Vector2,
				clone: function () { return new THREE.Vector2( this.x, this.y ); }
			};

			THREE.Face3 = function ( a, b, c, normal, color, materialIndex )
			{
				this.a = a;
				this.b = b;
				this.c = c;
				this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
				this.vertexNormals = normal instanceof Array ? normal : [ ];
				this.vertexTangents = [];
				this.centroid = new THREE.Vector3();
			};
			/* ########################### INIT (GEOMETRY) ################################################## */
			var diff = new THREE.Vector3(), tmpForce = new THREE.Vector3();
			var clothFunction, clothGeometry, cloth, pins = [];
			var gravity, windForce;
			var ballPosition = new THREE.Vector3(0, 0, 0), ballSize;

			function Particle(x, y, z, mass)
			{
				this.position = new THREE.Vector3(x, y, z); // position
				this.previous = new THREE.Vector3(x, y, z); // previous
				this.original = new THREE.Vector3(x, y, z);
				this.a = new THREE.Vector3(0, 0, 0); // acceleration
				this.mass = mass;
				this.invMass = 1 / mass;
				this.tmp = new THREE.Vector3();
				this.tmp2 = new THREE.Vector3();
			}

			Particle.prototype.addForce = function(force)
			{
				this.a.add( this.tmp2.copy(force).multiplyScalar(this.invMass) );
			};

			Particle.prototype.integrate = function(timesq, drag)
			{
				var newPos = this.tmp.subVectors(this.position, this.previous);
				newPos.multiplyScalar(drag).add(this.position);
				newPos.add(this.a.multiplyScalar(timesq));

				this.tmp = this.previous;
				this.previous = this.position;
				this.position = newPos;

				this.a.set(0, 0, 0);
			}

			function plane(width, height) { return function(u, v) { var x = u; var y = v; var z = 0; return new THREE.Vector3(x, y, z); };	}

			function Cloth(w, h)
			{
				w = w || 10;
				h = h || 10;
				this.w = w;
				this.h = h;

				var particles = [];
				var structConstrains = [];
				var shearConstrains = [];
				var flexConstrains = [];
				var u, v;

				// Create particles
				for (u=0;u<pointsGrid.length;u++)
				{
					var cpt = pointsGrid.item(u).pt;
					particles.push( new Particle(cpt.x, cpt.y, cpt.z, 1) );
				}

				// Constrains
				var restDistance2 = Math.sqrt(2)*restDistance;
				for (u=w, v=0;v<h;v++) { structConstrains.push([ particles[index(u, v)], particles[index(u, v+1)], restDistance ]); }   // structConstrains
				for (v=h, u=0;u<w;u++) { structConstrains.push([ particles[index(u, v)], particles[index(u+1, v)], restDistance ]); }  // structConstrains
				for (v=0;v<h;v++)
				{
					for (u=0;u<w;u++)
					{
						structConstrains.push([ particles[index(u, v)], particles[index(u, v+1)], restDistance, 1 ]);  // structConstrains
						structConstrains.push([ particles[index(u, v)], particles[index(u+1, v)], restDistance, 1 ]);  // structConstrains

						shearConstrains.push([ particles[index(u, v)], particles[index(u+1, v+1)], restDistance2 ]);  // shearConstrains
						shearConstrains.push([ particles[index(u+1, v)], particles[index(u, v+1)], restDistance2 ]);  // shearConstrains

						if ( u>0 && v>0 )
						{
							flexConstrains.push([ particles[index(u-1, v)], particles[index(u+1, v)], restDistance*2 ]);  // flexConstrains
							flexConstrains.push([ particles[index(u, v-1)], particles[index(u, v+1)], restDistance*2 ]);  // flexConstrains
						}
					}
				}

				this.particles = particles;
				this.structConstrains = structConstrains;
				this.shearConstrains = shearConstrains;
				this.flexConstrains = flexConstrains;

				function index(u, v) { return u + v * (w + 1); }
				this.index = index;
			}

			/* ########################### INIT  (MAIN) #################################################### */

			var startTime, period, pcnt=0, points=[], curveFX, curveFY, objList, restDistance, xSegs, ySegs, obstacles = [], obstaclesNum=0;
			var netHeightLast=0, netWidthLast=0, timer, surfacePt, pointsGrid, avgDistance, runAnimation = true, recordFrame=[], frameToShow, lastFrame = 0, lastMode = -1, frameInc=0, newFSval;
			var pointF, pointV, planeF, planeV, flowF, arrayF, arrayV;  // factories
			var objectpicker = moi.ui.createObjectPicker();

			function initMain() // external
			{
				pointF = moi.command.createFactory( 'point' );
				planeF = moi.command.createFactory( 'plane3pts' );
				arrayF = moi.command.createFactory( 'arraygrid' );
				flowF = moi.command.createFactory( 'flow' );
				pointsGrid = moi.geometryDatabase.createObjectList();
				frameSlider.value = 9999;
				drawMode.value = "XY";
			}

			function initCloth() // external
			{
				curveFX = moi.command.createFactory( 'interpcurve' );
				curveFY = moi.command.createFactory( 'interpcurve' );
				pointF = moi.command.createFactory( 'point' );
				xSegs = netWidth.value;
				ySegs = netHeight.value;
				restDistance = avgDistance;
				for (var x=0, max=(xSegs+1); x<max; x++) {curveFX.createInput('point'); }
				for (var y=0, max=(ySegs+1); y<max; y++) {curveFY.createInput('point'); }
				clothFunction = plane(restDistance * xSegs, restDistance * ySegs)
				cloth = new Cloth(xSegs, ySegs);

				objList = moi.geometryDatabase.createObjectList();
				clothGeometry = new THREE.ParametricGeometry( clothFunction, cloth.w, cloth.h );
				clothGeometry.dynamic = true;
				clothGeometry.computeFaceNormals();

				moi.geometryDatabase.removeObjects(pointsGrid);
			}

			function calcAveregeDistance() // external
			{
				avgDistance = 0;
				var thisP, nextX, nextY;
				for ( var y = 0; y<=netHeight.value; y++ )
				{
					for ( var x = 0; x<=netWidth.value; x++ )
					{
						thisP = y*(netWidth.value+1)+x;
						nextX = thisP+1;
						nextY = thisP + netWidth.value+1;
						if (x < netWidth.value) { avgDistance = avgDistance + moi.VectorMath.distance(pointsGrid.item(thisP).pt, pointsGrid.item(nextX).pt); }
						if (y < netHeight.value) { avgDistance = avgDistance + moi.VectorMath.distance(pointsGrid.item(thisP).pt, pointsGrid.item(nextY).pt); }
					}
				}
				avgDistance = avgDistance / (2*netHeight.value*netWidth.value+netHeight.value+netWidth.value);
			}

			function loadObstacles() // external
			{
				var oObj = objectpicker.objects.getBReps();
				var oType = { floor:0, sphere:1 };
				if (floorCheckbox.value)
				{
					obstacles[obstaclesNum]={};
					obstacles[obstaclesNum].type = oType.floor;
					obstacles[obstaclesNum].z=floorSetting.value;
					obstaclesNum++;
				}

				for (var i=0; i<oObj.length; i++)
				{
					obstacles[obstaclesNum]={};
					obstacles[obstaclesNum].type = oType.sphere;
					if  ( obstacles[obstaclesNum].type === oType.sphere)
					{
						var boundingBox = oObj.item(i).getBoundingBox();
						obstacles[obstaclesNum].x = boundingBox.center.x;
						obstacles[obstaclesNum].y = boundingBox.center.y;
						obstacles[obstaclesNum].z = boundingBox.center.z;
						obstacles[obstaclesNum].r = boundingBox.zLength/2;
					}
					obstaclesNum++;
				}
			}

			function preparePins() // external
			{
				for (x=0; x<pointsGrid.length; x++) { if (pointsGrid.item(x).selected) pins.push(x); }
			}

			/* ####################################  GRAPH ######################################################*/

			function redrawPoints() // timer
			{
				if (netHeight.value === "" || netWidth.value === "") return;
				if (netHeight.value > 1 && netWidth.value >1 )
				{
					if (netHeight.value === netHeightLast && netWidth.value === netWidthLast) return;
					netHeightLast = netHeight.value;
					netWidthLast = netWidth.value;
					pointF.setInput(0, moi.VectorMath.createPoint(0, 0, 0));
					pointV = pointF.calculate();

					planeF.setInput( 0, moi.VectorMath.createPoint(0, 0, 0));
					planeF.setInput( 1, moi.VectorMath.createPoint( netWidth.value, 0, 0));
					planeF.setInput( 2, moi.VectorMath.createPoint(0, netHeight.value, 0));
					planeV = planeF.calculate();
					arrayF.setInput( 2, 1 );
					arrayF.setInput( 3, 1 );
					arrayF.setInput( 6, netWidth.value+1 );
					arrayF.setInput( 7, netHeight.value+1 );
					arrayF.setInput( 8, 1 );
					arrayF.setInput( 9, pointV );
					arrayV=arrayF.calculate();
					for ( var i = 0, avLen = arrayV.length; i<avLen; i++) { pointV.addObject(arrayV.item(i));}

					flowF.setInput( 0, pointV );
					flowF.setInput( 1, planeV.Item(0) );
					flowF.setInput( 2, surfacePt );
					moi.geometryDatabase.removeObjects(pointsGrid);
					pointsGrid = flowF.calculate();
					moi.geometryDatabase.addObjects(pointsGrid);
				}
			}

			function updatePoints(cmd) // external
			{
				surfacePt = objectpicker.objects.item(0);
				if ( cmd === 1) {timer = setInterval( redrawPoints, 50 ); } else { clearInterval(timer); }
			}

			function redrawCurves() // timer
			{
				if ( frameInc !== 0 )
				{
					newFSval = frameSlider.value + 9999 / (recordFrame.length-1) * frameInc;
					if ( newFSval < 1 ) { newFSval = 1; frameInc=0;}
					if ( newFSval > 9999 ) { newFSval = 9999; frameInc=0;}
					frameSlider.value = Math.round(newFSval);
				}
				frameToShow = Math.round(frameSlider.value/9999 * (recordFrame.length-1));
				if  (lastFrame !== frameToShow || lastMode !== drawMode.value )
				{
					lastFrame = frameToShow;
					lastMode = drawMode.value;
					moi.geometryDatabase.removeObjects(objList);
					objList = drawCloth(recordFrame[frameToShow],  drawMode.value);
					moi.geometryDatabase.addObjects(objList);
					progressinfo.innerHTML = (frameToShow+1)+"/"+recordFrame.length;
				}
			}

			function updateCurves(cmd) // external
			{
				if ( cmd === 1) {timer = setInterval( redrawCurves, 50 ); } else { clearInterval(timer); }
			}

			function drawCloth(pArray, mode )
			{
				var curves = moi.geometryDatabase.createObjectList(), curve;
				if ( mode === "X" || mode === "XY" )
				{
					for (var x=0; x<=xSegs; x++)
					{
						for (var y=0; y<=ySegs; y++) { var i = y*(xSegs+1)+x; curveFY.setInput(y, moi.VectorMath.createPoint( pArray[i].x, pArray[i].y, pArray[i].z )); }
						curve = curveFY.calculate();
						curves.addObject(curve.item(0));
					}
				}

				if ( mode === "Y" || mode === "XY" )
				{
					for (var y=0; y<=ySegs; y++)
					{
						for (var x=0; x<=xSegs; x++) { var i = y*(xSegs+1)+x; curveFX.setInput(x, moi.VectorMath.createPoint( pArray[i].x, pArray[i].y, pArray[i].z )); }
						curve = curveFX.calculate();
						curves.addObject(curve.item(0));
					}
				}

				if ( mode === "P" )
				{
					for (var i=0; i<pArray.length; i++)
					{
						pointF.setInput(0, moi.VectorMath.createPoint( pArray[i].x, pArray[i].y, pArray[i].z ));
						curve = pointF.calculate();
						curves.addObject(curve.item(0));
					}
				}
				return curves;
			}

			/* #############################  CALC  ##############################################################*/

			function satisifyConstrains(p1, p2, distance, cMultiplier, cThereshold)
			{
				diff.subVectors(p2.position, p1.position);
				var currentDist = diff.length();
				var gapDist = 1 - distance/currentDist;
				if (currentDist==0 || gapDist < cThereshold ) return;
				var correction = diff.multiplyScalar(gapDist);
				var correctionHalf = correction.multiplyScalar(cMultiplier);
				p1.position.add(correctionHalf);
				p2.position.sub(correctionHalf);
			}

			function calcCloth()
			{
				var i, il, particles, particle, constrains, constrain, zlevel, iterationsCnt;
				// Pins
				particles = cloth.particles;
				if ( !lockAnchorPoints.value ) { for (i=0, il=pins.length;i<il;i++) { particle = particles[pins[i]]; particle.position.copy(particle.original); particle.previous.copy(particle.original); }}
				
				// Aerodynamics forces
				gravity = new THREE.Vector3( 0, 0, -(gravitySetting.value*restDistance)).multiplyScalar(massSetting.value/10);
				if (windPower.value !== 0)
				{
					var windVector = { x:0, y:0, z:0};
					windVector.x = Math.sin(windDir.value*Math.PI/180)*Math.sin(windElev.value*Math.PI/180)*windPower.value*restDistance;
					windVector.y = Math.cos(windDir.value*Math.PI/180)*Math.sin(windElev.value*Math.PI/180)*windPower.value*restDistance;
					windVector.z = -Math.cos(windElev.value*Math.PI/180)*windPower.value*restDistance;
					if (windVector.x === 0) windVector.x = 0.001;
					if (windVector.y === 0) windVector.y = 0.001;
					if (windVector.z === 0) windVector.z = 0.001;

					var windForce = new THREE.Vector3(windVector.x, windVector.y, windVector.z);
					for ( var i = 0, il = particles.length; i < il; i ++ ) { clothGeometry.vertices[ i ].copy( particles[ i ].position ); }

					clothGeometry.computeFaceNormals();
					clothGeometry.computeVertexNormals();
					var face, faces = clothGeometry.faces, normal;
					for (i=0,il=faces.length;i<il;i++)
					{
						face = faces[i];
						normal = face.normal;
						tmpForce.copy(normal).normalize().multiplyScalar(normal.dot(windForce));
						particles[face.a].addForce(tmpForce);
						particles[face.b].addForce(tmpForce);
						particles[face.c].addForce(tmpForce);
					}
				}
				var cdrag = 1- damping.value/1000;
				for (i=0, il = particles.length; i<il; i++)
				{
					particle = particles[i];
					particle.addForce(gravity);
					particle.integrate(timestep.value*timestep.value/1000000, cdrag);
				}

				// Constrains
				var structMultVal = structMult.value*structMult.value*structMult.value/2000000;
				var shearMultVal = shearMult.value*shearMult.value*shearMult.value/2000000;
				var flexMultVal = flexMult.value*flexMult.value*flexMult.value/2000000;
				var structGapVal = 1-100/structMultVal;
				var shearGapVal = 1-100/shearMultVal;
				var flexGapVal = 1-100/flexGapVal;

				iterationsCnt = iterations.value;
				while ( iterationsCnt > 0)
				{
					constrains = cloth.structConstrains, il = constrains.length;
					if ( structMultVal > 0 ) for (i=0;i<il;i++) { constrain = constrains[i]; satisifyConstrains(constrain[0], constrain[1], constrain[2], structMultVal, structGapVal); }

					constrains = cloth.shearConstrains, il = constrains.length;
					if ( shearMult.value > 1 ) for (i=0;i<il;i++) { constrain = constrains[i]; satisifyConstrains(constrain[0], constrain[1], constrain[2], shearMultVal, shearGapVal ); }

					constrains = cloth.flexConstrains, il = constrains.length;
					if ( flexMult.value > 1 ) for (i=0;i<il;i++) { constrain = constrains[i]; satisifyConstrains(constrain[0], constrain[1], constrain[2], flexMultVal, flexGapVal ); }
					iterationsCnt--;
				}

				// Obstacles
				if (obstaclesNum!==0)
				{
					for ( var obsCnt = 0; obsCnt<obstaclesNum; obsCnt++)
					{
						if  (obstacles[obsCnt].type === 1) // sphere
						{
							ballPosition.x=obstacles[obsCnt].x;
							ballPosition.y=obstacles[obsCnt].y;
							ballPosition.z=obstacles[obsCnt].z;
							ballSize = obstacles[obsCnt].r;
							for (i=0, il = particles.length;i<il;i++)
							{
								particle = particles[i];
								pos = particle.position;
								diff.subVectors(pos, ballPosition);
								if (diff.length() < ballSize)
								{
									diff.normalize().multiplyScalar(ballSize);
									pos.copy(ballPosition).add(diff);
								}
							}
						}
						/* else if  (obstacles[obsCnt].type === 2) // triangle
						{} */
						else if (obstacles[obsCnt].type === 0) // floor
						{
							zlevel = obstacles[obsCnt].z;
							for (i=0, il = particles.length; i<il ;i++)
							{
								particle = particles[i];
								pos = particle.position;
								if (pos.z < (zlevel) ) { pos.z = zlevel; }
							}
						}
					}
				}
				// Pins locked
				if ( lockAnchorPoints.value ) { for (i=0, il=pins.length;i<il;i++) { particle = particles[pins[i]]; particle.position.copy(particle.original); particle.previous.copy(particle.original); }}
			}

			function calcFrame()
			{
				if ( pcnt%10 === 0 ) { startTime = new Date(); }
				calcCloth();
				recordFrame[pcnt]=[];
				for (var i=0, il = cloth.particles.length; i<il; i++) { recordFrame[pcnt][i]={ x:cloth.particles[i].position.x, y:cloth.particles[i].position.y, z:cloth.particles[i].position.z }; }
				if (pcnt%(skipFrames.value+1) === 0) { moi.geometryDatabase.removeObjects(objList); objList = drawCloth(recordFrame[pcnt], "XY" ); moi.geometryDatabase.addObjects(objList); }
				if (pcnt%10 === 0 ) { period = Math.round((new Date() - startTime)*2); }
				pcnt++;
				progressinfo.innerHTML = pcnt+" "+period+" ms";
			}

		</script>
	</head>
	<body class="commandbody">
		<div id="TitleContainer" style="width:100%; text-align:center;">
			<strong>Cloth simulation</strong>
		</div>
		<div id="SurfacePrompt" class="commandprompt"  style="width:100%; text-align:center;">Select surface</div>
		<div id="AncorPrompt" class="hiddencommandprompt"  style="width:100%; text-align:center;">
		<table style="width:100%; padding-top:0.2em;">
			<col width="5"><col><col width="5">
			<tr>	<td colspan=3>Select anchor points</td></tr>
			<tr>	<td colspan=3>and obstacle objects*</td></tr>
			<tr>	<td colspan=3></td></tr>
			<tr>
				<td><moi:CheckButton id="floorCheckbox" default="false" ><nobr>Floor level<nobr></moi:CheckButton></td>
				<td colspan=2 style="width:100%;"><moi:NumericInput id="floorSetting" value="0"/></td>
			</tr>
			<tr>
				<td colspan=3 style="width:100%;"><moi:CheckButton id="lockAnchorPoints" default="false" ><nobr>Lock anchor points<nobr></moi:CheckButton></td>
			</tr>
		</table>
		</div>
		<div id="NetSizeOptions" class="hiddencommandoptions">
		<table style="width:100%; padding-top:0.2em;"
			<col width="5">
			<col>
			<col width="5">
			<tr>
				<td onclick="netHeight.value = netWidth.value"><nobr>Grid size X</nobr></td>
				<td><moi:Slider id="netWidthSlider" min="2" max="40" style="width:90%"   /></td>
				<td><moi:UnsignedIntegerInput id="netWidth" value="20"  binding="netWidthSlider.value = this.value" /></td>
			</tr>
			<tr>
				<td onclick="netWidth.value = netHeight.value"><nobr>Grid size Y</nobr></td>
				<td><moi:Slider id="netHeightSlider" min="2" max="40" style="width:90%"   /></td>
				<td><moi:UnsignedIntegerInput id="netHeight" value="20"  binding="netHeightSlider.value = this.value" /></td>
			</tr>
		</table>
		</div>

		<div id="AnimOptions" class="hiddencommandoptions">
		<table style="width:100%; padding-top:0.2em;">
			<col width="5">
			<col>
			<col width="5">
			<tr>
				<td onclick="skipFrames.value+=5;">Skip frm.</td>
				<td><moi:Slider id="skipFramesSlider" min="0" max="25" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="skipFrames" value="0"  binding="skipFramesSlider.value = this.value"  style="width:2.5em;" disabled="disabled"/></td>
			</tr>
			<tr>	<td colspan=3><b>Physics:<b></td></tr>
			<tr>
				<td onclick="gravitySetting.value = 10">Gravity</td>
				<td><moi:Slider id="gravitySlider" min="1" max="20" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="gravitySetting" value="10"  binding="gravitySlider.value = this.value"  style="width:2.5em;"/></td>
			</tr>
			<tr>
				<td onclick="massSetting.value = 10"><nobr>Mass x/10</nobr></td>
				<td><moi:Slider id="massSlider" min="1" max="20" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="massSetting" value="10"  binding="massSlider.value = this.value"  style="width:2.5em;"/></td>
			</tr>
			<tr>
				<td onclick="timestep.value = 20">Timestep</td>
				<td><moi:Slider id="timestepSlider" min="5" max="100" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="timestep" value="20"  binding="timestepSlider.value = this.value"  style="width:2.5em;"/></td>
			</tr>
			<tr>
				<td onclick="damping.value = 10">Damping</td>
				<td><moi:Slider id="dampingSlider" min="1" max="100" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="damping" value="10"  binding="dampingSlider.value = this.value"  style="width:2.5em;"/></td>
			</tr>
				<tr>	<td colspan=3 style="padding-top:0.5em;"><b>Constraints:<b></td></tr>
			<tr>
				<td onclick="if (structMult.value<100) structMult.value++;">Structural</td>
				<td><moi:Slider id="structMultSlider" min="1" max="100" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="structMult" value="100"  binding="structMultSlider.value = this.value"  style="width:2.5em;" disabled="disabled"/></td>
			</tr>
			<tr>
				<td onclick="if (flexMult.value<100) flexMult.value++;">Flexion</td>
				<td><moi:Slider id="flexMultSlider" min="1" max="100" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="flexMult" value="30"  binding="flexMultSlider.value = this.value"  style="width:2.5em;" disabled="disabled" /></td>
			</tr>
			<tr>
				<td onclick="if (shearMult.value<100) shearMult.value++;">Shear</td>
				<td><moi:Slider id="shearMultSlider" min="1" max="100" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="shearMult" value="30"  binding="shearMultSlider.value = this.value"  style="width:2.5em;" disabled="disabled"/></td>
			</tr>
			<tr>
				<td>Iterations</td>
				<td><moi:Slider id="iterationsSlider" min="1" max="20" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="iterations" value="6"  binding="iterationsSlider.value = this.value"  style="width:2.5em;" disabled="disabled"/></td>
			</tr>
			<tr>	<td colspan=3 style="padding-top:0.5em;"><b>Wind vector:<b></td></tr>
			<tr>
				<td onclick="windDir.value=(windDir.value+45<360)?windDir.value+45:windDir.value+45-360;">Direction</td>
				<td><moi:Slider id="windDirSlider" min="0" max="360" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="windDir" value="0"  binding="windDirSlider.value = this.value"  style="width:2.5em;"/></td>
			</tr>
			<tr>
				<td onclick="windElev.value=(windElev.value+45<=180)?windElev.value+45:0;">Elevation</td>
				<td><moi:Slider id="windElevSlider" min="0" max="180" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="windElev" value="90"  binding="windElevSlider.value = this.value"  style="width:2.5em;"/></td>
			</tr>
			<tr>
				<td onclick="windPower.value+=5;">Power</td>
				<td><moi:Slider id="windPowerSlider" min="0" max="20" style="width:90%"  /></td>
				<td><moi:UnsignedIntegerInput id="windPower" value="0"  binding="windPowerSlider.value = this.value" style="width:2.5em;"/></td>
			</tr>
		</table>
		</div>
		<div id="VideoPlayer" class="hiddencommandprompt"  style="width:100%; text-align:center;">
		<table style="width:100%; padding-top:0.2em;">
			<tr>
				<col width="1em"><col><col width="1em">
				<td ondblclick="frameInc=-1" onclick="frameInc=(frameInc !== 0)?0:0-0.2;"><<</td>
				<td  style="width:100%;"><moi:Slider id="frameSlider" min="0" max="9999" value=9999  style="margin:0; width:100%"/></td>
				<td ondblclick="frameInc=1" onclick="frameInc=(frameInc !== 0)?0:0.2;">>></td>
			</tr>
		</table>
		<table style="width:100%; padding-top:0.2em;">
			<tr>
				<td>Output:</td>
				<td style="width:100%;">
					<select id="drawMode" style="align:left; width:100%" >
					<option value="XY">Curves Both</option>
					<option value="X">Curves V</option>
					<option value="Y">Curves U</option>
					<option value="P">Points</option>
				</td>
			</tr>
		</table>
		</div>
		<div  id="DoneCancel" class="commandoptions"><moi:CommandDoneCancel /></div>
		<div  id="PauseOK" class="hiddencommandoptions" style="width:100%; text-align:center;"><moi:PushButton onclick="runAnimation=false" style="align:center; padding:0em; width:100%;">Stop</moi:PushButton></div>
		<div id="progressinfo" class="hiddencommandoptions" style="text-align:center; font-size:75%;">*spheres only</div>
	</body>
</html>
