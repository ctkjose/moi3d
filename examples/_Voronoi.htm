<html xmlns:moi>
	<head>
		<link rel="stylesheet" href="moi://ui/moi.css" type="text/css">
		<script>
			var rectObject, frame, vrn, points, edges, cells, objects, firstPush, pxSize, pySize, sourcePointsNum=0;

			function factory( factoryname ) { var f = moi.command.createFactory( factoryname ); for ( var i = 1; i < arguments.length; i++ ) if (arguments[i] !==null) f.setInput( i - 1, arguments[i] ); var obj = f.calculate(); f.cancel(); return obj; }

			function init()
			{
				rectObject = moi.geometryDatabase.createObjectList();
				objects = moi.geometryDatabase.createObjectList();
				frame = moi.VectorMath.createTopFrame();
				if (xSize.value>100) xSize.value=100;
				if (ySize.value>100) ySize.value=100;
				points=[];
				firstPush = true;
				vrn = new Voronoi();
				var pts = moi.geometryDatabase.getSelectedObjects().getPoints(); 
				if ( pts.length > 2)
				{
					var bbox = pts.getBoundingBox();
					xSize.value = Math.round((bbox.max.x-bbox.min.x)*1.1);
					ySize.value = Math.round((bbox.max.y-bbox.min.y)*1.1);
					frame.origin = moi.VectorMath.createPoint( bbox.min.x - (bbox.max.x-bbox.min.x)/20, bbox.min.y - (bbox.max.y-bbox.min.y)/20, 0);
					for ( var p=0; p<pts.length; p++ ) points.push(new Point(pts.item(p).pt.x+Math.random()/10-frame.origin.x, pts.item(p).pt.y+Math.random()/10-frame.origin.y));
					sourcePointsNum = pts.length;
				}
				pxSize = xSize.value;
				pySize = ySize.value;
				
				setRectangle();
				return sourcePointsNum;
			}

			function done()
			{
				if ( points.length < 2 ) { cancel(); return; }
				updateObjects();
				for (var i=0; i<objects.length; i++) objects.item(i).setHitTest(1);
				if (rectObject.length > 0) rectObject.item(0).setHitTest(1);
			}

			function cancel()
			{
				moi.geometryDatabase.removeObjects(rectObject);
				moi.geometryDatabase.removeObjects(objects);
			}

			function addNewPoint(x, y) { x -= frame.origin.x; y -= frame.origin.y; if ( x < xSize.value && y < ySize.value && x > 0 && y > 0 ) points.push(new Point(x+Math.random()/10, y+Math.random()/10));}

			function addRandomPoints(n) { for( var i=0; i<n; i++) points.push(new Point(Math.random()*xSize.value, Math.random()*ySize.value)); updateObjects(); }
			function addRandomPointsCont(n) 
			{ 
				var xS = xSize.value/3, yS = ySize.value/3;
				for( var i=0; i<n; i++) 
				{
					var x = Math.random()*xS, y = Math.random()*yS;
					points.push(new Point(Math.random()/10+x , Math.random()/10+y));
					points.push(new Point(Math.random()/10+x+xS , Math.random()/10+y));
					points.push(new Point(Math.random()/10+x+2*xS , Math.random()/10+y));
					points.push(new Point(Math.random()/10+x , Math.random()/10+y+yS));
					points.push(new Point(Math.random()/10+x+xS , Math.random()/10+y+yS));
					points.push(new Point(Math.random()/10+x+2*xS , Math.random()/10+y+yS));
					points.push(new Point(Math.random()/10+x , Math.random()/10+y+2*yS));
					points.push(new Point(Math.random()/10+x+xS , Math.random()/10+y+2*yS));
					points.push(new Point(Math.random()/10+x+2*xS , Math.random()/10+y+2*yS));
				}
				updateObjects(); 
			}

			function clearPoints() { moi.geometryDatabase.removeObjects(objects); moi.geometryDatabase.removeObjects(rectObject); init(); }

			function updatePoint(pp)
			{
				var x=pp.pt.x+Math.random()/10-frame.origin.x;
				var y=pp.pt.y+Math.random()/10-frame.origin.y;
			//	var xS = xSize.value;
			//	var yS = ySize.value;
				if (!firstPush) {points.pop(); }
				if ( x < xSize.value && y < ySize.value && x > 0 && y > 0 ) 
				{
					firstPush = false;
					points.push(new Point(x,y));
					updateObjects('picker');
				} else { firstPush = true; updateObjects(); }
			}

			function updateObjects(v)
			{
				var correction = (v == 'picker')?-1:0;
				vrn.Compute(points, xSize.value, ySize.value);
				edges = vrn.GetEdges();
				cells = vrn.GetCells();
				moi.geometryDatabase.removeObjects(objects);
				objects = moi.geometryDatabase.createObjectList();
				for (var i=sourcePointsNum; i<points.length+correction; i++)
				{
					var point = factory( 'point', frame.evaluate( points[i].x, points[i].y, 0));
					if (point.length>0)
					{
						objects.addObject(point.item(0));
						point.item(0).setHitTest(0);
					}
				}
				
				if ( edges !== null ) for (var i=0; i<edges.length; i++)
				{
					var x0 = edges[i].start.x;
					var y0 = edges[i].start.y;
					var x1 = edges[i].end.x;
					var y1 = edges[i].end.y;
					
					if ( x0 > xSize.value ) { y0 = y0 + (y1 - y0) * (xSize.value - x0) / (x1 - x0); x0 = xSize.value; }
					if ( y0 > ySize.value ) { x0 = x0 + (x1 - x0) * (ySize.value - y0) / (y1 - y0); y0 = ySize.value; }
					if ( x1 > xSize.value ) { y1 = y1 + (y0 - y1) * (xSize.value - x1) / (x0 - x1); x1 = xSize.value; }
					if ( y1 > ySize.value ) { x1 = x1 + (x0 - x1) * (ySize.value - y1) / (y0 - y1); y1 = ySize.value; }
				
					if ( x0 < 0 ) { y0 = y0 - (y1 - y0) * x0 / (x1 - x0); x0 = 0; }
					if ( y0 < 0 ) { x0 = x0 - (x1 - x0) * y0 / (y1 - y0); y0 = 0; }
					if ( x1 < 0 ) { y1 = y1 - (y0 - y1) * x1 / (x0 - x1); x1 = 0; }
					if ( y1 < 0 ) { x1 = x1 - (x0 - x1) * y1 / (y0 - y1); y1 = 0; }
					
					var line = factory( 'line', frame.evaluate( x0, y0, 0), frame.evaluate( x1, y1, 0));
					if (line.length>0)
					{
						line.item(0).setHitTest(0);
						objects.addObject(line.item(0));
					}
				}
				moi.geometryDatabase.addObjects(objects);
			}

			function setRectangle()
			{
				if ( xSize.value <= 0 ) xSize.value = pxSize;
				if ( ySize.value <= 0 ) ySize.value = pySize;			
				moi.geometryDatabase.removeObjects(rectObject);
				rectObject = factory('rectangle', frame, frame.evaluate(xSize.value, ySize.value, 0));
				if (rectObject.length > 0) rectObject.item(0).setHitTest(0);
				moi.geometryDatabase.addObjects(rectObject);
				for ( var i=0; i<points.length; i++) { points[i].x = points[i].x/pxSize*xSize.value; points[i].y = points[i].y/pySize*ySize.value; }
				pxSize = xSize.value;
				pySize = ySize.value;
				updateObjects();
			}

		//	Point
			function Point(x, y) { this.x = x; this.y = y; }
			Point.prototype.distance = function(a, b) { return(Math.sqrt( (b.x-a.x)*(b.x-a.x) + (b.y-a.y)*(b.y-a.y) )); }

		//	VEdge
			function VEdge(s, a, b)
			{
				this.left = a;
				this.right = b;
				this.start = s;
				this.end = null;

				this.f = (b.x - a.x) / (a.y - b.y);
				this.g = s.y - this.f*s.x;
				this.direction = new Point(b.y-a.y, -(b.x - a.x));
				this.B = new Point(s.x+this.direction.x, s.y + this.direction.y);

				this.intersected = false;
				this.iCounted = false;
				this.neighbour = null;
			}

		//	VEvent.js
			function VEvent(p, pe)
			{
				this.point = p;
				this.pe = pe;
				this.y = p.y;
				this.key = Math.random()*100000000;
				this.arch = null;
				this.value = 0;
			}

			VEvent.prototype.compare = function(other)	{ return((this.y>other.y)?1:-1); }

			function Voronoi()
			{
				with(this)
				{
					this.places = null;
					this.edges = null;
					this.cells = null;
					this.queue = new VQueue;

					this.width = 0;
					this.heght = 0;
					this.root = null;
					this.ly = 0;
					this.lasty = 0;
					this.fp = null;
				}
			}

		//	VParabola
			function VParabola(s)
			{
				this.cEvent = null;
				this.parent = null;
				this._left = null;
				this._right = null;
				this.site = s;
				this.isLeaf = (this.site != null);
			}

			VParabola.prototype = {
			get left() { return this._left;},
			get right(){ return this._right;},

			set left(p){this._left = p;	p.parent = this;},
			set right(p){this._right = p;p.parent = this;}
			};

		//	VQueue
			function VQueue() { this.q = new Array(); this.i = 0;}
			function sortOnY(a, b) { return (a.y > b.y)?1:-1 ; }

			VQueue.prototype.enqueue = function(p) { this.q.push(p); }
			VQueue.prototype.dequeue = function() { this.q.sort(sortOnY); return this.q.pop();}
			VQueue.prototype.remove = function(e)
			{
				var index = -1;
				for(this.i=0; this.i<this.q.length; this.i++) if(this.q[this.i]==e){ index = this.i; break; }
				this.q.splice(index, 1);
			}

			VQueue.prototype.isEmpty = function()
			{
				return (this.q.length==0);
			}

			VQueue.prototype.clear = function(b)
			{
				this.q = [];
			}

		//	VPolygon
			function VPolygon()
			{
				this.size = 0;
				this.vertices = [];
				this.first = null;
				this.last = null;
			}

			VPolygon.prototype.addRight = function(p)
			{
				this.vertices.push(p);
				++this.size;
				this.last = p;
				if(this.size==1) this.first = p;
			}

			VPolygon.prototype.addLeft  = function(p)
			{
				var vs = this.vertices;
				this.vertices = [p];
				for(var i=0; i<vs.length; i++)
					this.vertices.push(vs[i]);

				++this.size;
				this.first = p;
				if(this.size==1) this.last = p;
			}

		//	Voronoi
			Voronoi.prototype.Compute = function(p, width, height)
			{
				if(p.length<2) return [];

				this.root = null;
				this.places = p;
				this.edges = [];
				this.cells = [];
				this.width = width;
				this.height = height;

				this.queue.clear(true);

				for(i=0; i<this.places.length; i++)
				{
					var ev = new VEvent(this.places[i], true);
					var cell = new VPolygon();
					this.places[i].cell = cell;
					this.queue.enqueue(ev);
					this.cells.push(cell);
				}

				var lasty = Number.MAX_VALUE;
				var num = 0;
				while(!this.queue.isEmpty())
				{
					var e = this.queue.dequeue();
					this.ly = e.point.y;
					if(e.pe) this.InsertParabola(e.point);
					else this.RemoveParabola(e);
					this.lasty = e.y;
				}
				this.FinishEdge(this.root);

				for(i=0; i<this.edges.length; i++)
					if(this.edges[i].neighbour) this.edges[i].start = this.edges[i].neighbour.end;
			}

			Voronoi.prototype.GetEdges = function() { return this.edges; }
			Voronoi.prototype.GetCells = function() { return this.cells; }
			Voronoi.prototype.InsertParabola = function(p)
			{
				if(!this.root){this.root = new VParabola(p); this.fp = p; return;}
				if(this.root.isLeaf && this.root.site.y - p.y <0.01)
				{
					this.root.isLeaf = false;
					this.root.left = new VParabola(this.fp);
					this.root.right = new VParabola(p);
					var s = new Point((p.x+this.fp.x)/2, this.height);
					if(p.x>this.fp.x) this.root.edge = new VEdge(s, this.fp, p);
					else this.root.edge = new VEdge(s, p, this.fp);
					this.edges.push(this.root.edge);
					return;
				}

				var par = this.GetParabolaByX(p.x);

				if(par.cEvent) { this.queue.remove(par.cEvent); par.cEvent = null; }

				var start = new Point(p.x, this.GetY(par.site, p.x));
				var el = new VEdge(start, par.site, p);
				var er = new VEdge(start, p, par.site);

				el.neighbour = er;
				this.edges.push(el);
				par.edge = er;
				par.isLeaf = false;

				var p0 = new VParabola(par.site);
				var p1 = new VParabola(p);
				var p2 = new VParabola(par.site);

				par.right = p2;
				par.left = new VParabola();
				par.left.edge = el;
				par.left.left = p0;
				par.left.right = p1;
				this.CheckCircle(p0);
				this.CheckCircle(p2);
			}

			Voronoi.prototype.RemoveParabola = function(e)
			{
				var p1 = e.arch;
				var xl = this.GetLeftParent(p1);
				var xr = this.GetRightParent(p1);
				var p0 = this.GetLeftChild(xl);
				var p2 = this.GetRightChild(xr);

				if(p0.cEvent){this.queue.remove(p0.cEvent); p0.cEvent = null;}
				if(p2.cEvent){this.queue.remove(p2.cEvent); p2.cEvent = null;}

				var p = new Point(e.point.x, this.GetY(p1.site, e.point.x));
				if(p0.site.cell.last == p1.site.cell.first ) p1.site.cell.addLeft(p);
				else p1.site.cell.addRight(p);

				p0.site.cell.addRight(p);
				p2.site.cell.addLeft(p);
				this.lasty = e.point.y;
				xl.edge.end = p;
				xr.edge.end = p;

				var higher;
				var par = p1;
				while(par != this.root)
				{
					par = par.parent;
					if(par == xl) {higher = xl;}
					if(par == xr) {higher = xr;}
				}

				higher.edge = new VEdge(p, p0.site, p2.site);
				this.edges.push(higher.edge);

				var gparent = p1.parent.parent;
				if(p1.parent.left == p1)
				{
					if(gparent.left  == p1.parent) gparent.left  = p1.parent.right;
					else p1.parent.parent.right = p1.parent.right;
				}
				else
				{
					if(gparent.left  == p1.parent) gparent.left  = p1.parent.left;
					else gparent.right = p1.parent.left;
				}
				this.CheckCircle(p0);
				this.CheckCircle(p2)
			}

			Voronoi.prototype.FinishEdge = function(n)
			{
				var mx;
				if(n.edge.direction.x > 0.0)
				{
					mx = Math.max(this.width, n.edge.start.x + 10 );
				}
				else
				{
					mx = Math.min(0.0, n.edge.start.x - 10);
				}
				n.edge.end = new Point(mx, n.edge.f*mx + n.edge.g);

				if(!n.left.isLeaf)  this.FinishEdge(n.left);
				if(!n.right.isLeaf) this.FinishEdge(n.right);
			}

			Voronoi.prototype.GetXOfEdge = function(par, y)
			{
				var left =	this.GetLeftChild (par);
				var right = this.GetRightChild(par);
				var p = left.site;
				var r = right.site;
				var dp = 2*(p.y - y);
				var a1 = 1/dp;
				var b1 = -2*p.x/dp;
				var c1 = y+dp*0.25 + p.x*p.x/dp;
				dp = 2*(r.y - y);
				var a2 = 1/dp;
				var b2 = -2*r.x/dp;
				var c2 = y+dp*0.25 + r.x*r.x/dp;
				var a = a1 - a2;
				var b = b1 - b2;
				var c = c1 - c2;
				var disc = b*b - 4 * a * c;
				var x1 = (-b + Math.sqrt(disc)) / (2*a);
				var x2 = (-b - Math.sqrt(disc)) / (2*a);

				var ry;
				if(p.y < r.y ) ry =  Math.max(x1, x2);
				else ry = Math.min(x1, x2);

				return ry;
			}

			Voronoi.prototype.GetParabolaByX = function(xx)
			{
				var par = this.root;
				var x = 0;

				while(!par.isLeaf)
				{
					x = this.GetXOfEdge(par, this.ly);
					if(x>xx) par = par.left;
					else par = par.right;
				}
				return par;
			}

			Voronoi.prototype.GetY = function(p, x)
			{
				var dp = 2*(p.y - this.ly);
				var b1 = -2*p.x/dp;
				var c1 = this.ly+dp/4 + p.x*p.x/dp;

				return(x*x/dp + b1*x + c1);
			}

			Voronoi.prototype.CheckCircle = function(b)
			{
				var lp = this.GetLeftParent(b);
				var rp = this.GetRightParent(b);

				var a = this.GetLeftChild(lp);
				var c = this.GetRightChild(rp);

				if(!a || !c || a.site == c.site) return;

				var s = this.GetEdgeIntersection(lp.edge, rp.edge);
				if(!s) return;

				var d = Point.prototype.distance(a.site, s);

				if(s.y - d  >= this.ly) return;

				var e = new VEvent(new Point(s.x, s.y - d), false);

				b.cEvent = e;
				e.arch = b;
				this.queue.enqueue(e);
			}

			Voronoi.prototype.GetEdgeIntersection = function(a, b)
			{
				var I = GetLineIntersection(a.start, a.B, b.start, b.B);

				// wrong direction of edge
				var wd = 	(I.x - a.start.x)*a.direction.x<0 || (I.y - a.start.y)*a.direction.y<0
						||	(I.x - b.start.x)*b.direction.x<0 || (I.y - b.start.y)*b.direction.y<0;

				if(wd) return null;
				return I;
			}

			Voronoi.prototype.GetLeft = function(n)
			{
				return this.GetLeftChild( this.GetLeftParent(n));
			}

			Voronoi.prototype.GetRight = function(n)
			{
				return this.GetRightChild(this.GetRightParent(n));
			}

			Voronoi.prototype.GetLeftParent = function(n)
			{
				var par = n.parent;
				var pLast = n;
				while(par.left == pLast)
				{
					if(!par.parent) return null;
					pLast = par; par = par.parent;
				}
				return par;
			}

			Voronoi.prototype.GetRightParent = function(n)
			{
				var par = n.parent;
				var pLast = n;
				while(par.right == pLast)
				{
					if(!par.parent) return null;
					pLast = par; par = par.parent;
				}
				return par;
			}
			Voronoi.prototype.GetLeftChild = function(n)
			{
				if(!n) return null;
				var par = n.left;
				while(!par.isLeaf) par = par.right;
				return par;
			}
			Voronoi.prototype.GetRightChild = function(n)
			{
				if(!n) return null;
				var par = n.right;
				while(!par.isLeaf) par = par.left;
				return par;
			}

			function GetLineIntersection(a1, a2, b1, b2)
			{
				var dax = (a1.x-a2.x), dbx = (b1.x-b2.x);
				var day = (a1.y-a2.y), dby = (b1.y-b2.y);

				var Den = dax*dby - day*dbx;
				if (Den == 0) return null;	// parallel

				var A = (a1.x * a2.y - a1.y * a2.x);
				var B = (b1.x * b2.y - b1.y * b2.x);

				var I = new Point(0,0);
				I.x = ( A*dbx - dax*B ) / Den;
				I.y = ( A*dby - day*B ) / Den;

				return I;
			}

		</script>
	</head>

	<body class="commandbody">
		<div id="Options" class="commandoptions">
			<table style="width:100%; text-align:center;">
				<col><col width="5">
				<tr>
					<td ondblclick='clearPoints();'><strong>Diagramme Voronoi</strong></td>
				</tr>
			</table>
			<table style="width:100%">
				<col width="5"><col>
				<tr><td style="width:20%">Sortie</td><td><select id="output" onchange="" style="width:100%" >
					<option value="1">Lignes</option>
					<option value="2" disabled >Polygones</option>
					<option value="3" disabled>Courbes</option>
				</select></td></tr>
			</table>
		</div>
		<div id="SizeOptions" class="hiddencommandoptions">
			<table style="width:100%">
			<col width="5"><col><col width="5">
			<tr>
				<td onclick='xSize.value=20; moi.ui.fireUIEvent("xSize");'>Largeur</td><td><moi:Slider id="xSlider" min="1" mid="20" max="100" style="width:90%"  /></td>
				<td style="width:3em;"><moi:UnsignedIntegerInput id="xSize" value="20"  style="width:3em;" binding="xSlider.value = this.value" /></td>
			</tr>
			<tr>
				<td onclick='ySize.value=20; moi.ui.fireUIEvent("ySize");'>Hauteur</td><td><moi:Slider id="ySlider" min="1" mid="20" max="100" style="width:90%"  /></td>
				<td style="width:3em;"><moi:UnsignedIntegerInput id="ySize" value="20"  style="width:3em;" binding="ySlider.value = this.value" /></td>
			</tr>
			</table>
		</div>
		<table style="width:100%; padding-top:0.5em;">
			<tr>
			<td><moi:PushButton onclick="addRandomPoints(10);" style="align:center; padding:0em; width:100%;">Ajout Pts aléatoires</moi:PushButton></td>
			</tr>
		</table>
		<div id="DoneCancelContainer"><moi:CommandDoneCancel /></div>
	</body>
</html>
